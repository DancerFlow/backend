generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model item {
  id         Int         @id @default(autoincrement()) @db.UnsignedInt
  name       String      @unique(map: "name") @db.VarChar(255)
  image_url  String      @db.VarChar(255)
  created_at DateTime    @default(now()) @db.Timestamp(0)
  user_item  user_item[]
}

model music {
  id                 Int                  @id @default(autoincrement()) @db.UnsignedInt
  name               String               @db.VarChar(255)
  genre_id           Int?                 @db.UnsignedInt
  singer_id          Int                  @db.UnsignedInt
  album_image_url    String               @db.VarChar(255)
  description        String?              @db.VarChar(255)
  likes              Int                  @default(0) @db.UnsignedInt
  played             Int                  @default(0) @db.UnsignedInt
  created_at         DateTime             @default(now()) @db.Timestamp(0)
  deleted_at         DateTime?            @db.Timestamp(0)
  music_genre        music_genre?         @relation(fields: [genre_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "music_music_genre_id_fk")
  music_singer       music_singer         @relation(fields: [singer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "music_music_singer_id_fk")
  music_answer       music_answer?
  music_answer_sheet music_answer_sheet[]
  user_likes         user_likes[]
  user_play_log      user_play_log[]
  user_score         user_score[]

  @@index([genre_id], map: "music_music_genre_id_fk")
  @@index([singer_id], map: "music_music_singer_id_fk")
}

model music_answer {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  music_id    Int      @unique(map: "music_id") @db.UnsignedInt
  video_url   String   @db.VarChar(255)
  total_count Int      @db.UnsignedInt
  total_score Int      @db.UnsignedInt
  created_at  DateTime @default(now()) @db.Timestamp(0)
  music       music    @relation(fields: [music_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "music_answer_music_id_fk")
}

model music_answer_sheet {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  music_id   Int      @db.UnsignedInt
  sheet      Json
  created_at DateTime @default(now()) @db.Timestamp(0)
  music      music    @relation(fields: [music_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "music_answer_sheet_music_id_fk")

  @@index([music_id], map: "music_answer_sheet_music_id_fk")
}

model music_genre {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  name       String   @unique(map: "name") @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(0)
  music      music[]
}

model music_singer {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  name       String   @unique(map: "name") @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(0)
  music      music[]
}

model tier {
  id         Int         @id @default(autoincrement()) @db.UnsignedInt
  name       tier_name   @unique(map: "name")
  image_url  String?     @db.VarChar(255)
  created_at DateTime    @default(now()) @db.Timestamp(0)
  user_tier  user_tier[]
}

model user {
  id            Int             @id @default(autoincrement()) @db.UnsignedInt
  created_at    DateTime        @default(now()) @db.Timestamp(0)
  deleted_at    DateTime?       @db.Timestamp(0)
  user_admin    user_admin?
  user_auth     user_auth?
  user_info     user_info?
  user_item     user_item[]
  user_likes    user_likes[]
  user_play_log user_play_log[]
  user_score    user_score[]
  user_tier     user_tier[]
  user_token    user_token?
}

model user_admin {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int       @unique(map: "user_id") @db.UnsignedInt
  created_at DateTime  @default(now()) @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  user       user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_admin_user_id_fk")
}

model user_auth {
  id        Int            @id @default(autoincrement()) @db.UnsignedInt
  user_id   Int            @unique(map: "user_id") @db.UnsignedInt
  email     String?        @db.VarChar(320)
  password  String?        @db.VarChar(128)
  social_id String?        @db.VarChar(255)
  type      user_auth_type
  user      user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_auth_user_id_fk")
}

model user_info {
  id                Int    @id @default(autoincrement()) @db.UnsignedInt
  user_id           Int    @unique(map: "user_id") @db.UnsignedInt
  nickname          String @unique(map: "nickname") @db.VarChar(50)
  profile_image_url String @db.VarChar(255)
  user              user   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_info_user_id_fk")
}

model user_item {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int      @db.UnsignedInt
  item_id    Int      @db.UnsignedInt
  created_at DateTime @default(now()) @db.Timestamp(0)
  is_using   Int      @db.TinyInt
  item       item     @relation(fields: [item_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_item_item_id_fk")
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_item_user_id_fk")

  @@index([item_id], map: "user_item_item_id_fk")
  @@index([user_id], map: "user_item_user_id_fk")
}

model user_likes {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int      @db.UnsignedInt
  music_id   Int      @db.UnsignedInt
  created_at DateTime @default(now()) @db.Timestamp(0)
  music      music    @relation(fields: [music_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_likes_music_id_fk")
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_likes_user_id_fk")

  @@index([music_id], map: "user_likes_music_id_fk")
  @@index([user_id], map: "user_likes_user_id_fk")
}

model user_play_log {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int      @db.UnsignedInt
  music_id   Int      @db.UnsignedInt
  created_at DateTime @default(now()) @db.Timestamp(0)
  music      music    @relation(fields: [music_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_play_log_music_id_fk")
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_play_log_user_id_fk")

  @@index([music_id], map: "user_play_log_music_id_fk")
  @@index([user_id], map: "user_play_log_user_id_fk")
}

model user_score {
  id                Int                @id @default(autoincrement()) @db.UnsignedInt
  user_id           Int                @db.UnsignedInt
  music_id          Int                @db.UnsignedInt
  score             Int                @db.UnsignedInt
  rank              user_score_rank
  is_practice       Boolean            @default(false)
  created_at        DateTime           @default(now()) @db.Timestamp(0)
  music             music              @relation(fields: [music_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_score_music_id_fk")
  user              user               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_score_user_id_fk")
  user_score_detail user_score_detail?

  @@index([music_id], map: "user_score_music_id_fk")
  @@index([user_id], map: "user_score_user_id_fk")
}

model user_score_detail {
  id         Int        @id @default(autoincrement()) @db.UnsignedInt
  score_id   Int        @unique(map: "score_id") @db.UnsignedInt
  perfect    Int        @default(0) @db.UnsignedInt
  good       Int        @default(0) @db.UnsignedInt
  miss       Int        @default(0) @db.UnsignedInt
  user_score user_score @relation(fields: [score_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_score_detail_user_score_id_fk")
}

model user_tier {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int      @db.UnsignedInt
  tier_id    Int      @db.UnsignedInt
  created_at DateTime @default(now()) @db.Timestamp(0)
  tier       tier     @relation(fields: [tier_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_tier_tier_id_fk")
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_tier_user_id_fk")

  @@index([tier_id], map: "user_tier_tier_id_fk")
  @@index([user_id], map: "user_tier_user_id_fk")
}

model user_token {
  id            Int      @id @default(autoincrement()) @db.UnsignedInt
  user_id       Int      @unique(map: "user_id") @db.UnsignedInt
  refresh_token String   @unique(map: "refresh_token") @db.VarChar(255)
  expired_at    DateTime @db.Timestamp(0)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  user          user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "token_user_id_fk")
}

enum tier_name {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

enum user_score_rank {
  C
  B
  A
  S
  SSS
}

enum user_auth_type {
  email
  google
  apple
  naver
  kakao
}
